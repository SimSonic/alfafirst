/*
 * Сервис проверки статуса банкоматов
 * Сервис, возвращающий информацию о банкоматах Альфа-Банка
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@alfabank.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lampa.alfabattle.first.dto;

import com.fasterxml.jackson.annotation.*;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * PostAddress
 */
@JsonPropertyOrder({
        PostAddress.JSON_PROPERTY_CITY,
        PostAddress.JSON_PROPERTY_LOCATION,
        PostAddress.JSON_PROPERTY_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-06-27T10:26:33.214272+03:00[Europe/Moscow]")
public class PostAddress {
    public static final String JSON_PROPERTY_CITY = "city";
    private String city;

    public static final String JSON_PROPERTY_LOCATION = "location";
    private String location;

    /**
     * Gets or Sets mode
     */
    public enum ModeEnum {
        FIAS("FIAS"),

        KLADR("KLADR"),

        OTHERDICTIONARY("OtherDictionary"),

        HANDMADE("HandMade");

        private String value;

        ModeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ModeEnum fromValue(String value) {
            for (ModeEnum b : ModeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_MODE = "mode";
    private ModeEnum mode;


    public PostAddress city(String city) {

        this.city = city;
        return this;
    }

    /**
     * Get city
     *
     * @return city
     **/

    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCity() {
        return city;
    }


    public void setCity(String city) {
        this.city = city;
    }


    public PostAddress location(String location) {

        this.location = location;
        return this;
    }

    /**
     * Get location
     *
     * @return location
     **/

    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_LOCATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getLocation() {
        return location;
    }


    public void setLocation(String location) {
        this.location = location;
    }


    public PostAddress mode(ModeEnum mode) {

        this.mode = mode;
        return this;
    }

    /**
     * Get mode
     *
     * @return mode
     **/

    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public ModeEnum getMode() {
        return mode;
    }


    public void setMode(ModeEnum mode) {
        this.mode = mode;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostAddress postAddress = (PostAddress) o;
        return Objects.equals(this.city, postAddress.city) &&
                Objects.equals(this.location, postAddress.location) &&
                Objects.equals(this.mode, postAddress.mode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(city, location, mode);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PostAddress {\n");
        sb.append("    city: ").append(toIndentedString(city)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

